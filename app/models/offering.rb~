class Offering < ActiveRecord::Base
	include ActionView::Helpers::TextHelper
	require 'csv'
  has_many :orders, :foreign_key => "offering_id", :dependent => :destroy
  has_many :offering_products, :foreign_key => "offering_id", :dependent => :destroy
  has_many :products, through: :offering_products
  accepts_nested_attributes_for :offering_products, :reject_if => :all_blank, :allow_destroy => true
  validates :name, presence: true
  scope :with_n_products, lambda {|n| {:joins => :offering_products, :group => "offering_products.offering_id", :having => ["count(offering_id) = ?", n]}}


  def value
  	sql = ActiveRecord::Base.connection()
  	d=sql.execute("SELECT SUM(products.price * offering_products.quantity) as purchases FROM offerings INNER JOIN offering_products ON offering_products.offering_id = offerings.id INNER JOIN products ON products.id = offering_products.product_id WHERE (offerings.id = #{id})")
  	return d[0]["purchases"].to_f
  end
  
  def self.search(search,price)
  	if search
			words = search.to_s.strip.split
		  words.inject(all) do |combined_scope, word|
		  	if price
		    	combined_scope.includes(:products).where('products.id NOT NULL AND LOWER(offerings.name) LIKE ? AND price > 0',"%#{word.downcase}%").references(:products)
		    else	
					combined_scope.includes(:products).where('products.id IS NOT NULL AND LOWER(offerings.name) LIKE ?',"%#{word.downcase}%").references(:products)
		    end
		  end
  	else
  		return all
  	end
  end
  
  def self.add_price(file)
  	offs ={}
  	prices={}
  	csv_text = File.read(file)
  	i=0
		CSV.parse(csv_text, headers: true, col_sep: "\t") do |row|
			offs[i]=row[0]
  		prices[i]= row[1]
  		i=i+1
		end
		return prices
  end
  
	def total_weight
		sql = ActiveRecord::Base.connection()
		d=sql.execute("SELECT SUM(products.weight * offering_products.quantity) FROM offerings INNER JOIN offering_products ON offering_products.offering_id = offerings.id INNER JOIN products ON products.id = offering_products.product_id WHERE (offerings.id = #{self.id})")
		return d.map { |a| a["sum"].to_f }[0]
	end
end
